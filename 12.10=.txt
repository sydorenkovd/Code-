admire - восхищатсяб любоватся.
hesitate - колебатся.
looking forward - ждать с нетерпением.
increase - увеличиваться.
frankly - откровенно говоря.
explode(); - разбить строку на фрагменты.
class NumberFormatter:
$number = 1234.56;
// В США для сумм в евро используются знаки € , и .
// $formatted содержит €1,234.56
$usa = new NumberFormatter("en-US", NumberFormatter::CURRENCY);
$formatted = $usa->formatCurrency($number, 'EUR');
--------------------
$when = new DateTime();
print $when->format('d/M/Y');
//вывод даты с помощью обьекта класса DateTime.
Методы  add() и  sub() класса  DateTime изменяют объект  DateTime , для которого они вызываются, на величину, заданную в интервале.
---------DatePeriod--------
// Начать с 1 августа
$start = new DateTime('August 1, 2014');
// Остановиться 31 августа (конечная дата не включается)
$end = new DateTime('September 1, 2014');
// С шагом в 1 день
$interval = new DateInterval('P1D');
$range1 = new DatePeriod($start, $interval, $end);
---------------------
/*Генератор представляет собой функцию, которая возвращает итеративный объект. При переборе по объекту PHP многократно вызывает генератор для получения следующего значения, которое возвращается функцией-генератором при помощи ключевого слова  yield */
function FileLineGenerator($file) {
if (!$fh = fopen($file, 'r')) {
return;
}
while (false !== ($line = fgets($fh))) {
yield $line;
}
fclose($fh);
}
$file = FileLineGenerator('log.txt');
foreach ($file as $line) {
if (preg_match('/^rasmus: /', $line)) { print $line; }
}
--------------ArrayAccesSPL-------
class FakeArray implements ArrayAccess {
private $elements;
public function __construct() {
$this->elements = array();
}
public function offsetExists($offset) {
return isset($this->elements[$offset]);
}
public function offsetGet($offset) {
return $this->elements[$offset];
}
public function offsetSet($offset, $value) {
return $this->elements[$offset] = $value;
}
public function offsetUnset($offset) {
unset($this->elements[$offset]);
}
}
//Теперь можно создать экземпляр  FakeArray и работать с ним как с //массивом:
$array = new FakeArray;
$array['animal'] = 'wabbit';
if (isset($array['animal']) &&
$array['animal'] == 'wabbit') {
unset($array['animal']);
}
if (!isset($array['animal'])) {
print "Well, what did you expect in an opera? A happy ending?\n";
}
/*При каждой операции вызывается один из методов: присваивание значения
$array['animal'] приводит к выполнению  offsetSet() , проверка  isset-
($array['animal']) активизирует  offsetExists() ,  offsetGet() вступает в игру
при сравнении  $array['animal'] == 'wabbit' , а  offsetUnset() вызывается для
unset($array['animal'])*/
166/784

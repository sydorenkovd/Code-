//Методы объекта module
//    animation(name, factory) используется для создания анимации
//    config(callback) регистрирует функцию которая используется для конфигурации модуля при его загрузке(init, constructor)
//    constant(key, value) определяет сервис который возвращает константу
//    controller(name, constructor) создает контроллер
//    directive(name, factory) создает директиву
//    factory(name, provider) создает сервис применяя фабричный метод
//    filter(name, factory) создает фильтр
//    provider(name, type) создает сервис применяя метод провайдер
//    name возвращает имя модуля
//    run(callback) регистрирует функцию которая будет вызванан после того как Angular загрузит все модули
//    service(name, constructor) создает сервис применяя сервис метод
//    value(name, value) создает сервис который возвращает константу

scope: {key: "=value"} - "=" обозначает двунаправленную привязку

[Посмотреть все методы на главной](https://github.com/sydorenkovd/Code-/edit/master/angular)

<!--$interval и $timeout сервисы являются обертками над функциями JavaScript windowsetInterval() и window.setTimeout()
они принимают аргументы:
    fn функция чье выполнение будет задержано
    delay количество милисекунд до выполения функции
    count количество раз когда выполнение функции будет повторятся ($interval), значение по умолчанию 0 и оно означает бесконечное повторение
    invokeApply когда установлено true(это значение по default) функция будет выполнятся с применением scope.$apply метода-->
    ------------location для работы с урл без перезагрузки страницы и перходов-----------------
    <!--с помощью сервиса $location можно получить доступ к url но только к той ее части которая указана после #
например http://mydomain.com/app.html#/cities/london?select=hotels#north нет возможности с помощью этого сервиса изменить весь url так как
если выполнится переход по другому url то текущее приложение будет выгружено-->
<!--сервис $location содержит методы:
    absUrl() возвращает полный url
    hash()/hash(target) возвращает или устанавливает hash секцию url
    host() возвращает имя хоста (mysite.com)
    path()/path(target) возвращает или устанавливает path секцию url
    port() возвращает номер порта (по умолчанию 80)
    protocol() возвращет protocol (http)
    replace() все изменения в текущем url заменяются записью из истории
    search()/search(term, param) возвращает или устанавливает search секцию url
    url()/url(target) возвращает или устанавливает path, query string, hash
так же сервис $location содержит несколько событий которые можно использовать для уведомления об изменении url
из-за действий пользователя или програмно, обработчики на эти события можно указать используя метод $on, обработчик будет
получать в качестве аргументов новый url и старый url
    $locationChangeStart генерируется перед изменением url, обработав это событие можно препятствовать изменениям url   
    $locationChangeSuccess генерируется после изменения url-->
    
    <!--$anchorScroll сервис выполняет прокрутку документа до того элемента id которого возвращается $location.hash() методом-->
    <!--для обработки ошибок следует использовать $exceptionHandler сервис, он работает только с теми ошибками
которые не обрабатываются(например в конструкции try catch)-->
<p ng-bind-html="htmlData"></p>
        <!--ng-bind-html выполняет привязку и проверяет выражение на содержание недопустимых символов, по умолчанию использует 
        $sanitize сервис, необходимо подключение angular_sanitize.js который содержим модуль ngSanitize--> 
        <!--запустившись мы увидим строку которая указана в свойстве htmlData но на самом деле angularJS уже обработал ее
        и отображаемая строка превратилась в &lt;p&gt;This is &lt;b onmouseover=alert('Attack!')&gt;dangerous&lt;/b&gt; data&lt;/p&gt;
        были заменены опасные символы на более безопасные-->
  <!--в некоторых случаях все же нужно оставить возможность выполнять клиенту javascript код, для этого в angularjs существует сервис $sce этот сервис содержит метод trustAsHtml который возвращает выражение обработанное сервисом $sce-->
    
    <!--сервис $parse позволяет превращать angularjs выражения в функции которые могут обрабатывать данные-->
    
    
    

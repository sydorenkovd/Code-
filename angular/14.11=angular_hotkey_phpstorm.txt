insult - оскорблять
patient - терпеливый
seem - казаться
reject - отвергать, отклонять
-------Hotkey for PhpStorm----------
ctrl + w - Select successively increasing code blocks
Ctrl + Shift + V  Paste from recent buffers.
Ctrl + Y  Delete line at caret
Ctrl + R  Replace
Ctrl + Shift + F  Find in path
Ctrl + N  Go to class
Ctrl + Shift + N  Go to file
----------------
VCS
Ctrl + K  Commit project to VCS
Ctrl + T  Update project from VCS
Alt + Shift + C  View recent changes
----------------
Ctrl + Alt + Enter - enter before line
hold Alt - create more carret
Ctrl + Q - documentation
Ctrl + space - open prompt
CTRL+ ALT + L - Reformat Code
CTRL+SHIFT+Backspace - Last Edition Location
----------------
Alt + insert - generate code
Alt + Enter  Show intention actions and quick-fixes
Ctrl + e - recent files
double * shift - search files
Ctrl + Alt + T - surround with (foreach or some)
Ctrl + O  Override methods
Ctrl + I  Implement methods
Ctrl?+ Shift + J - join lines
Ctrl?+?Shift + ( ]/[ )  Select till code block end/start
Ctrl + G  Go to line
Ctrl + B or Ctrl + Click  Go to declaration
Ctrl + Alt + S - config PHPStorm



Скажем только, что расставить курсоры можно с помощью Alt+Click; добавить следующее совпадение в выделение: Alt+J удалить совпадение из выделения: Alt+Shift+J;
-----------------------------
ng-model - связывает форму с моделью. Это значит, что любые 
изменения в форме обновят данные модели, а при изменении модели - обновится форма
ng-app обозначает корень AngularJS-приложения и обычно располагается в корне страницы.
ng-controller - назначает поведение области видимости. Это ключевой аспект поддержки в
Angular шаблона Модель-Вид-Контроллер.
//$scope содержит данные модели. Это связующее звено между контроллером и видом.
//$scope всего лишь один из сервисов, внедренных в контроллер.
ng-repeat создает экземпляры по шаблону для каждого элемента коллекции. Каждый экземпляр 
шаблона получает собственную область видимости, в которой создаются переменные, имеющиеся
в текущем элементе коллекции и в $index устанавливается индекс или ключ элемента.
ng-app="customModule" - активирует модуль.
Создание нового модуля:
var myModule = angular.module ('myModule', []);
---------------------------
$index - системная переменная изначально равна 0 чаще всего используется для указания
 позиции.
even и odd используются зачастую чтобы задавать четным и нечетным элементам разные стили
$even возвращает true если элемент четный.
ng-if - используется для отображения элемента в DOM  в зависимости от условия
 например "$first || $last" означает что будут отображены в DOM  только 1й и последний 
элементы
<ng-include src="'../table.html'"></ng-include> - подключает файлы с помощью ajax

ng-switch-when - определяет участок разметки с которым ассоциируется условие
ng-switch - может быть примененна как элемент и как атрибут, а ng-switch-when и 
ng-switch-default только как атрибуты 
здесь у атрибута ng-switch присутствует атрибут on который указывает на некое условие 
в зависимости от условия будет отображатся та или инная часть разметки.
------------------------
ng-checked используется для установки значения выбран\не выбран для input
    ng-disabled используется для disable элемента применяется для input и button
    ng-readonly используется для атрибута readonly применяется к input
    ng-selected используется для атрибута selected в option-->
    <!--ng-href используется для указания url в href
    ng-src используется для указания физического пути-->
------------------------
существует несколько переменных валидации в angular:
        $pristine  возвращает true если пользователь не взаимодействовал с элементами формы
        $dirty  возвращает true если пользователь взаимодействовал с элементами формы
        $valid возвращает true если форма валидна
        $invalid возвращает true если форма невалидна
        $error содержит информацию об ошибках валидации
------------------------
ng-hide - спрятать елемент если true
ng-submit - Определяет какую функцию вызивать при отправке формы нажатием на кнопку сабмит
ng-show - противоположность к ng-hide принимает параметр как myForm.userEmail.$invalid
------валидация-----------
ng-change используется для определения выражения которое будет выполянтся когда контент элемента изменится
    ng-minlength устанавливает минимальное колличество символов для того чтобы данные введенные в элемент считались валидными
    ng-maxlength устанавливает максимальное колличество символов для того чтобы данные введенные в элемент считались валидными
    ng-pattern устанавливает регулярное выражение, соответствуя которому данные будут считатся валидными
    ng-required устанавливает обязательность введения данных для элемента
    пример:
     <input name="sample" class="form-control" ng-model="inputValue" ng-required="requireValue" 
     ng-minlength="3" ng-maxlength="10" ng-pattern="matchPattern" />
      <!--Обратите внимание что для элементов input у которых атрибут type равен email, url, number
         не нужно указывать ng-pattern так как angular уже использует его для проверки на валидность содержимое элемента-->
<!--Атрибуты которые могут применятся к input  с типом checkbox :
        ng-change используется для определения выражения которое будет выполянтся когда контент элемента изменится
        ng-true-value определяет значение которое установится выражением привязки данных когда состояние элемента будет "выбран"
        ng-false-value определяет значение которое установится выражением привязки данных когда состояние элемента будет "не выбран"-->
        Селекты и работа с ними
        !--ng-options="item.action for item in tasks" это выражение указывает сгенерировать элементы option для каждого элемента из tasks и отобразить содержимое свойства item.action-->
        Группировки в селекте
         <select ng-model="value" ng-options="task.action group by task.priority for task in tasks">
                            <option value="">Select one</option>
                        </select>
                        <!--используйте group by для для создания группировок элементов option-->
-------------------Контроллеры и scope--------------------------------
 <!--Методы для посылки и получения events:
    $broadcast(name, args) отсылает event из текущего scope всем дочерним, 1й аргумент - имя события, 2й - объект предоставляющий дополнительные данные
    $emit(name, args) отсылает event от текущего scope  к rootScope
    $on(name, handler) регистрирует обработчик который будет вызван когда scope инициирует необходимый event,
    аргументы: 1й - название события для которого сработает обработчик 2й - функция обработчик-->
    ------------Аngular работает с другими библиотеками--------------------
    <!--$apply(expression) применяет изменения к scope
$watch(expression, handler) регистрирует обрабочик который будет срабатывать при изменении выражения expression
$watchCollection(object, handler) регистрирует обработчик который будет реагировать когда хоть какое-то свойство из коллекции свойств изменится-->
---------------------------Фильтры-----------------------------
// Фильтрация количества выводимых элементов на странице
 $scope.selectItems = function (item) {
                    return item.itemCategory == "Dairy" || item.itemName == "Juice";
                    //функция для каждого элемента item сравнивает его с Dairy или Juice и если они равны то возвращает true
                };
<div class="col-xs-3" ng-repeat="item in items | filter:selectItems">
                <!--фильтр по категории можно реализовать 2-мя способами:
                1) указать фильтр filter:{category:'Dairy'}
                2) создать функцию и вызывать её-->
                
 // Фильтрация сортировки выводящихся значений
                
<div class="col-xs-12" ng-repeat="item in items | orderBy:'itemPrice'">
                <!--наиболее широко используемый фильтр - orderBy, предназначен для сортировки элементов массива-->
                <!--используя этот фильтр следует помнить о его особенности, значение для фильтрации должно быть в одинарных кавычках
                так если их не указать то angular считает что вы хотите использовать свойство scope и если его нет то возможно
                оно появится в будущем-->
                <!--используя знак + или - можно указывать направление сортировки orderBy:'+price'/orderBy:'-price'-->
                // Кастомная сортировка
                $scope.customSorter = function (value) {
                    return value.expireDate < 10 ? 0 : value.itemPrice;
                    //функция сортировки проверяет если дата конца срока годности продукта меньше 10 дней
                    //то этот продукт следует расположить на первое место в массиве
                };
<div class="col-xs-12" ng-repeat="item in items | orderBy:customSorter">
                <!--так же еще одна причина почему нужно указывать свойство в кавычки это возможность для сортировки использовать фунцкцию,
                которую уже в кавычках указывать не нужно-->
                
-----------------Создание собственной директивы------------------------
.directive("orderedList", function () {
                //для создания директивы следует использовать метод directive который принимает 2 аргумента: 1) имя директивы; 2) фабричная функция
                return function (scope, element, attributes) {
                    //такая worker функция называется ссылочной функцией - это означает что она связывает директиву в разметке с данными из scope
                    //эта функция будет вызванан когда angularjs создает экземпляры директивы и передает туда 3 аргумента:
                    //1)scope для view к которому применена директива; 2) HTML элемент к которому будет применена директива;
                    //3) атрибуты HTML элемента к которому применена директива
                    //эти аргументы не предоставляются Dependency Injection это стандартные аргументы JavaScript поэтому их порядок важен
                    var data = scope[attributes["orderedList"]];
                    //благодаря attributes можно получить атрибуты из разметки, далее атрибут передается в scope для получения его значения
                    if (angular.isArray(data)) {
                        var elem = angular.element("<ol>");
                        //метод element который является оберткой над функционалом jqlite(фактически возвращает jqLite объект с помощью которого можно получить домступ к другим методам jqLite)
                        //здесь c его помощью мы создаем элемент ul
                        element.append(elem);
                        //так как атрибут element представляет HTML элемент к которому применена директива
                        //то на нем доступен метод append который позволяет вставить новый элемент разметки
                        for (var i = 0; i < data.length; i++) {
                            elem.append(angular.element('<li>').text(data[i].itemName));
                        }
                    }
                }
            }).controller...
            <div ordered-list="items"></div>
            <!--angularjs обрабатывает каждую букву в верхнем регистре как знак раздлеления - поэтому имеет смысл применять немного измененное имя директивы-->
        </div>
// как применить фильтр или другое выражение к данным
//elem.append(angular.element('<li>').text(data[i][prop]));
                            elem.append(angular.element('<li>').text(scope.$eval(expression, data[i])));
            //метод scope.$eval([expression], [locals]) применяет к текущему scope expression и возвращает результат, аргументы:
 //    1) [expression] выражение которое нужно выполнить
//    2) объект который содержит переменные для переопределения значений в scope                            
 //здесь в метод мы передаем содержимое атрибута и объект со свойствами и если для свойства есть данные из объекта то он их применяет
                            //таким образом мы не затрагиваем фильтр

------------jqLite упрощенная библиотека jQuery for Angularjs-------------
jqLite методы для навигации по DOM
    children() возвращает jqLite объект который содержит набор дочерних элементов
    eq(index) возвращает jqLite объект который содержит элемент по определенному индексу из коллекции элементов
    find(tag) находит все элементы с указанным имененем тега
    next() возвращает следующий элемент (который находится на том же уровне что и тот для которого вызывается метод)
    parent() возвращает родительский элемент-->
    -------------------------
    jqLite предоставляет ряд методов для изменения элементов и их содержимого
    addClass(name) добавляет все элементы из jqLite объекта в класс
    attr(name)/attr(name, value) возвращает значение для атрибута первого элемента из jqLite объекта или устанавливает значение для всех элементов
    css(name)/css(name, value)  возвращает значение css свойства первого элемента из jqLite объекта или устанавливает значение css свойства для всех элементов
    hasClass(name) возвращает true если любой из жлементов jqLite объекта принадлежит к указанному классу
    prop(name)/prop(name, value) возвращает значение свойства первого элемента из jqLite объекта или устанавливает значение свойства для всех элементов
    removeAttr(name) удаляет атрибут из всех элементов jqLite объекта
    removeClass(name) удаляет элементы jqLite объекта из определенного css класса
    text()/text(value)  возвращает сконкатенированный текст всех элементов jqLite объекта
        или устанавливает значение для всех элементов jqLite объекта
    toggleClass(name) выполняет инверсию css класса для элементов jqLite объекта. Те элементы который были включены в класс - удаляются, а те которые не были включены - добавляются.
    val()/val(value) возвращает атрибут value для первого элемента из jqLite объекта или устанавливает атрибут value для всех элементов jqLite объекта.-->
---------------------------
<!--jqLite предоставляет ряд методов для создания и удаления элементов разметки
    angular.element(html) создает jqLite объект который представляет элемент HTML указанный в скобках
    after(elements) выполняет вставку контента после элемента на котором был вызван данный метод
    append(elements) выполняет вставку элемента как последнего дочернего элемента каждого элемента из jqLite объекта на котором был вызван метод
    clone() возвращает новый jqLite объект который является дубликатом того объекта на котором был вызван метод
    prepend(elements) выполняет вставку элемента как первого дочернего элемента каждого элемента из jqLite объекта на котором был вызван метод
    remove() удаляет элементы которыe присутствуют в jqLite объекте из DOM
    replaceWith(elements) выполняет замену элементов jqLite объекта на котором был вызван метод на элементы указанные в аргументах
    wrap(elements) упаковывает каждый элемент из jqLite объекта в элемент указанный в аргументах-->
    ------------------------------
    <!--jqLite предоставляет ряд методов для обработки событий
    on(events, handler) регистрирует обработчик для одного или нескольких событий инициатором которых является елемент который представлен как jqLite объект
    off(events, handler) удаляет предварительно зарегистрированный обработчик для елемента который представлен как jqLite объект
    triggerHandler(event) запускает все обработчики для события указанного в аргументах.
    -->
    
так же в jqLite существует еще несколько методов которые используются не часто:
    removeData(key) удаляет данные по ключу из элемента представленного jqLite объектом
    html() возвращает HTML представление содержимого первого элемента представленного jqLite объектом
    ready(handler) регистрирует функцию обработчик которая будет выполнена когда DOM будет полностью загружен
    controller()/controller(name) возвращает контроллер который применен к элементу или к его родителю
    scope() возвращает scope который применен к элементу или к его родителю

    
    
    
    

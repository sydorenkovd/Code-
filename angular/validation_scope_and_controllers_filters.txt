------валидация-----------
ng-change используется для определения выражения которое будет выполянтся когда контент элемента изменится
    ng-minlength устанавливает минимальное колличество символов для того чтобы данные введенные в элемент считались валидными
    ng-maxlength устанавливает максимальное колличество символов для того чтобы данные введенные в элемент считались валидными
    ng-pattern устанавливает регулярное выражение, соответствуя которому данные будут считатся валидными
    ng-required устанавливает обязательность введения данных для элемента
    пример:
     <input name="sample" class="form-control" ng-model="inputValue" ng-required="requireValue" 
     ng-minlength="3" ng-maxlength="10" ng-pattern="matchPattern" />
      <!--Обратите внимание что для элементов input у которых атрибут type равен email, url, number
         не нужно указывать ng-pattern так как angular уже использует его для проверки на валидность содержимое элемента-->
<!--Атрибуты которые могут применятся к input  с типом checkbox :
        ng-change используется для определения выражения которое будет выполянтся когда контент элемента изменится
        ng-true-value определяет значение которое установится выражением привязки данных когда состояние элемента будет "выбран"
        ng-false-value определяет значение которое установится выражением привязки данных когда состояние элемента будет "не выбран"-->
        Селекты и работа с ними
        !--ng-options="item.action for item in tasks" это выражение указывает сгенерировать элементы option для каждого элемента из tasks и отобразить содержимое свойства item.action-->
        Группировки в селекте
         <select ng-model="value" ng-options="task.action group by task.priority for task in tasks">
                            <option value="">Select one</option>
                        </select>
                        <!--используйте group by для для создания группировок элементов option-->
-------------------Контроллеры и scope--------------------------------
 <!--Методы для посылки и получения events:
    $broadcast(name, args) отсылает event из текущего scope всем дочерним, 1й аргумент - имя события, 2й - объект предоставляющий дополнительные данные
    $emit(name, args) отсылает event от текущего scope  к rootScope
    $on(name, handler) регистрирует обработчик который будет вызван когда scope инициирует необходимый event,
    аргументы: 1й - название события для которого сработает обработчик 2й - функция обработчик-->
    ------------Аngular работает с другими библиотеками--------------------
    <!--$apply(expression) применяет изменения к scope
$watch(expression, handler) регистрирует обрабочик который будет срабатывать при изменении выражения expression
$watchCollection(object, handler) регистрирует обработчик который будет реагировать когда хоть какое-то свойство из коллекции свойств изменится-->
---------------------------Фильтры-----------------------------
// Фильтрация количества выводимых элементов на странице
 $scope.selectItems = function (item) {
                    return item.itemCategory == "Dairy" || item.itemName == "Juice";
                    //функция для каждого элемента item сравнивает его с Dairy или Juice и если они равны то возвращает true
                };
<div class="col-xs-3" ng-repeat="item in items | filter:selectItems">
                <!--фильтр по категории можно реализовать 2-мя способами:
                1) указать фильтр filter:{category:'Dairy'}
                2) создать функцию и вызывать её-->
                
 // Фильтрация сортировки выводящихся значений
                
<div class="col-xs-12" ng-repeat="item in items | orderBy:'itemPrice'">
                <!--наиболее широко используемый фильтр - orderBy, предназначен для сортировки элементов массива-->
                <!--используя этот фильтр следует помнить о его особенности, значение для фильтрации должно быть в одинарных кавычках
                так если их не указать то angular считает что вы хотите использовать свойство scope и если его нет то возможно
                оно появится в будущем-->
                <!--используя знак + или - можно указывать направление сортировки orderBy:'+price'/orderBy:'-price'-->
                // Кастомная сортировка
                $scope.customSorter = function (value) {
                    return value.expireDate < 10 ? 0 : value.itemPrice;
                    //функция сортировки проверяет если дата конца срока годности продукта меньше 10 дней
                    //то этот продукт следует расположить на первое место в массиве
                };
<div class="col-xs-12" ng-repeat="item in items | orderBy:customSorter">
                <!--так же еще одна причина почему нужно указывать свойство в кавычки это возможность для сортировки использовать фунцкцию,
                которую уже в кавычках указывать не нужно-->
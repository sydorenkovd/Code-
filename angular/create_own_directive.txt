-----------------Создание собственной директивы------------------------
.directive("orderedList", function () {
                //для создания директивы следует использовать метод directive который принимает 2 аргумента: 1) имя директивы; 2) фабричная функция
                return function (scope, element, attributes) {
                    //такая worker функция называется ссылочной функцией - это означает что она связывает директиву в разметке с данными из scope
                    //эта функция будет вызванан когда angularjs создает экземпляры директивы и передает туда 3 аргумента:
                    //1)scope для view к которому применена директива; 2) HTML элемент к которому будет применена директива;
                    //3) атрибуты HTML элемента к которому применена директива
                    //эти аргументы не предоставляются Dependency Injection это стандартные аргументы JavaScript поэтому их порядок важен
                    var data = scope[attributes["orderedList"]];
                    //благодаря attributes можно получить атрибуты из разметки, далее атрибут передается в scope для получения его значения
                    if (angular.isArray(data)) {
                        var elem = angular.element("<ol>");
                        //метод element который является оберткой над функционалом jqlite(фактически возвращает jqLite объект с помощью которого можно получить домступ к другим методам jqLite)
                        //здесь c его помощью мы создаем элемент ul
                        element.append(elem);
                        //так как атрибут element представляет HTML элемент к которому применена директива
                        //то на нем доступен метод append который позволяет вставить новый элемент разметки
                        for (var i = 0; i < data.length; i++) {
                            elem.append(angular.element('<li>').text(data[i].itemName));
                        }
                    }
                }
            }).controller...
            <div ordered-list="items"></div>
            <!--angularjs обрабатывает каждую букву в верхнем регистре как знак раздлеления - поэтому имеет смысл применять немного измененное имя директивы-->
        </div>
// как применить фильтр или другое выражение к данным
//elem.append(angular.element('<li>').text(data[i][prop]));
                            elem.append(angular.element('<li>').text(scope.$eval(expression, data[i])));
            //метод scope.$eval([expression], [locals]) применяет к текущему scope expression и возвращает результат, аргументы:
 //    1) [expression] выражение которое нужно выполнить
//    2) объект который содержит переменные для переопределения значений в scope                            
 //здесь в метод мы передаем содержимое атрибута и объект со свойствами и если для свойства есть данные из объекта то он их применяет
                            //таким образом мы не затрагиваем фильтр

------------jqLite упрощенная библиотека jQuery for Angularjs-------------
jqLite методы для навигации по DOM
    children() возвращает jqLite объект который содержит набор дочерних элементов
    eq(index) возвращает jqLite объект который содержит элемент по определенному индексу из коллекции элементов
    find(tag) находит все элементы с указанным имененем тега
    next() возвращает следующий элемент (который находится на том же уровне что и тот для которого вызывается метод)
    parent() возвращает родительский элемент-->
    -------------------------
    jqLite предоставляет ряд методов для изменения элементов и их содержимого
    addClass(name) добавляет все элементы из jqLite объекта в класс
    attr(name)/attr(name, value) возвращает значение для атрибута первого элемента из jqLite объекта или устанавливает значение для всех элементов
    css(name)/css(name, value)  возвращает значение css свойства первого элемента из jqLite объекта или устанавливает значение css свойства для всех элементов
    hasClass(name) возвращает true если любой из жлементов jqLite объекта принадлежит к указанному классу
    prop(name)/prop(name, value) возвращает значение свойства первого элемента из jqLite объекта или устанавливает значение свойства для всех элементов
    removeAttr(name) удаляет атрибут из всех элементов jqLite объекта
    removeClass(name) удаляет элементы jqLite объекта из определенного css класса
    text()/text(value)  возвращает сконкатенированный текст всех элементов jqLite объекта
        или устанавливает значение для всех элементов jqLite объекта
    toggleClass(name) выполняет инверсию css класса для элементов jqLite объекта. Те элементы который были включены в класс - удаляются, а те которые не были включены - добавляются.
    val()/val(value) возвращает атрибут value для первого элемента из jqLite объекта или устанавливает атрибут value для всех элементов jqLite объекта.-->
---------------------------
<!--jqLite предоставляет ряд методов для создания и удаления элементов разметки
    angular.element(html) создает jqLite объект который представляет элемент HTML указанный в скобках
    after(elements) выполняет вставку контента после элемента на котором был вызван данный метод
    append(elements) выполняет вставку элемента как последнего дочернего элемента каждого элемента из jqLite объекта на котором был вызван метод
    clone() возвращает новый jqLite объект который является дубликатом того объекта на котором был вызван метод
    prepend(elements) выполняет вставку элемента как первого дочернего элемента каждого элемента из jqLite объекта на котором был вызван метод
    remove() удаляет элементы которыe присутствуют в jqLite объекте из DOM
    replaceWith(elements) выполняет замену элементов jqLite объекта на котором был вызван метод на элементы указанные в аргументах
    wrap(elements) упаковывает каждый элемент из jqLite объекта в элемент указанный в аргументах-->
    ------------------------------
    <!--jqLite предоставляет ряд методов для обработки событий
    on(events, handler) регистрирует обработчик для одного или нескольких событий инициатором которых является елемент который представлен как jqLite объект
    off(events, handler) удаляет предварительно зарегистрированный обработчик для елемента который представлен как jqLite объект
    triggerHandler(event) запускает все обработчики для события указанного в аргументах.
    -->
    
так же в jqLite существует еще несколько методов которые используются не часто:
    removeData(key) удаляет данные по ключу из элемента представленного jqLite объектом
    html() возвращает HTML представление содержимого первого элемента представленного jqLite объектом
    ready(handler) регистрирует функцию обработчик которая будет выполнена когда DOM будет полностью загружен
    controller()/controller(name) возвращает контроллер который применен к элементу или к его родителю
    scope() возвращает scope который применен к элементу или к его родителю

---------------Создание комплексной директивы----------------
Для того чтобы указать эти опции следует использовать инной подход: фабричная функция долждна возвращать JavaScript объект, 
    который содержит в себе свойства для указания полноценной кастомизации директивы. Перечень свойств представлен ниже:
        compile определяет функцию компиляции
        controller создает функцию-контроллер для директории
        link определяет ссылочную функцию для директивы
        replace определяет замещать ли содержимое элемента к которому была примененна директива сгенерированным контентом 
        require объявляет зависимость от контроллера
        restrict определяет как директива может быть применена
        scope создает новый scope или isolated scope для директивы
        template определяет шаблон который будет вставлен в HTML разметку
        templateUrl определяет шаблон извне который будет вставлен в HTML разметку
        transclude определяет может ли директива использоватся в качестве обертки для произвольного содержимого-->
        
        
